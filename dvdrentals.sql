--SQL QUERIES ON 'dvdrental' DATABASE WRITTEN BY IDOKO EMMANUEL 


--Q1.	Retrieve the titles of all movies in the database.

SELECT title
FROM film;

--Q2.	List the first name and last name of all customers.

SELECT first_name, last_name
FROM customer;

--Q3.	Find the total number of customers in the database.

SELECT COUNT (customer_id) AS Total_Customers
FROM customer;

--Q4.	Get the rental duration (in days) for each rental.

SELECT rental_date, return_date, 
		(return_date - rental_date) AS RENTAL_DAYS
FROM rental;


--Q5.	Display the rental ID, customer ID, and return date for all rentals that are overdue.

--The syntax is written but not applied because this question seeks to answer any rentals 
--that is overdue based on current date but i used a 2005 last updated database 
-- the SQL syntax fits into a current dvdrental database 

SELECT rental_id, customer_id,  return_date
FROM
    rental
WHERE
    return_date < CURRENT_DATE;

--Q6.	Find the names of actors who have appeared in more than 10 films.

SELECT DISTINCT first_name, last_name
FROM actor AS A
INNER JOIN film_actor as F
ON A.actor_id = F.actor_id
GROUP BY  A.first_name, A.last_name
HAVING COUNT(A.actor_id) > 10;


--Q7.	List the movies that have a rating of 'PG-13'.

SELECT title
FROM film
WHERE rating ='PG-13';


--Q8.	Retrieve the customer names who have rented a movie titled 'Fight Club'.

SELECT first_name, last_name
FROM customer AS C
JOIN rental AS R
ON C.customer_id = R.customer_id
JOIN inventory AS I
ON R.inventory_id = I.inventory_id
JOIN film AS F
ON I.film_id = F.film_id
WHERE F.title = 'Fight Club';

--Q9.	Find the total revenue generated by the rental store.
SELECT SUM (amount) AS Total_Revenue
FROM payment;
--GROUP BY rental_id, amount;

--Q10.	List the top 5 movies with the highest rental revenue.
SELECT f.title, SUM (P.amount) AS Rent_revenue
FROM  film AS F
JOIN inventory AS I
ON f.film_id = I.film_id
JOIN rental AS R
on I.inventory_id = R.inventory_id
JOIN Payment AS P
ON R.rental_id = P.rental_id
GROUP BY F.title
ORDER BY Rent_revenue desc
LIMIT 5;


--Q11.	Get the rental history for a specific customer (you can specify the customer by ID).

SELECT
    R.rental_id,
    R.rental_date,
    F.title AS movie_title,
    R.return_date
FROM
    customer AS C
JOIN rental AS R 
ON C.customer_id =R.customer_id
JOIN inventory AS I
ON R.inventory_id = I.inventory_id
JOIN film AS F
ON I.film_id = F.film_id
WHERE
    C.customer_id = 342; 
	

--Q12.	Find the average replacement cost of movies.

SELECT AVG(replacement_cost) AS Average_Replacement_cost
FROM film;


--Q13.	Display the staff members (first name and last name) who have rented movies.

SELECT S.first_name, S.last_name
FROM staff as S
JOIN rental AS R
ON S.staff_id = R.staff_id
GROUP BY S.staff_id;


--Q14.	List the cities where the rental store has branches.

SELECT C.city
FROM city AS C
JOIN address AS A  
ON A.city_id = A.city_id
JOIN store AS S	
ON A.address_id = S.address_id
GROUP BY C.city;

--Q15.	Find the most frequently rented movie genre.

SELECT C.name
FROM category AS C
JOIN film_category AS F 
ON C.category_id = F.category_id
JOIN inventory AS I 
ON F.film_id = I.film_id
JOIN rental AS R
ON I.inventory_id = R.inventory_id
GROUP BY C.name
ORDER BY COUNT(R.rental_id) DESC
LIMIT 1;

--Q16.	Retrieve the top 10 customers who have rented the most movies.

SELECT C.first_name, C.last_name
FROM customer AS C
JOIN rental AS R
ON C.customer_id = R.customer_id
GROUP BY C.first_name, C.last_name
ORDER BY COUNT (R.rental_id) DESC
LIMIT 10;


--Q17.	List the movies that are currently not available for rent (i.e., not in the inventory).

SELECT F.title
FROM film AS F
LEFT JOIN inventory AS I
ON F.film_id = I.film_id
WHERE I.inventory_id IS NULL;


--Q18.	Find the total number of rentals for each month in the year 2005.
--SELECT * FROM rental
SELECT
    EXTRACT(YEAR FROM rental_date) AS rental_year,
    EXTRACT(MONTH FROM rental_date) AS rental_month,
    COUNT(*) AS total_rentals
FROM
    rental
WHERE
    EXTRACT(YEAR FROM rental_date) = 2005
GROUP BY
    rental_year,
    rental_month
ORDER BY
    rental_year,
    rental_month;


--Q19.	Calculate the average rental rate for each movie genre.

SELECT C.name AS GENRE, AVG(F.rental_rate) AS  Average_rental_Rate
FROM film AS F 
JOIN film_category AS FC
ON F.film_id = FC.film_id
JOIN category AS C
ON FC.category_id = C.category_id
GROUP BY C.name
ORDER BY C.name DESC;

--Q20.	Display the actors who have appeared in movies with the title containing 'Matrix'.

SELECT A.first_name, A.last_name, F.title
FROM actor AS A
JOIN film_actor AS FA
ON A.actor_id = FA.actor_id
JOIN film AS F
ON FA.film_id = F.film_id
WHERE title LIKE '%Matrix%';



--Thank You for listening and I welcome any form of Criticism and advice to improve on this work.
--Emmanuel Idoko
 